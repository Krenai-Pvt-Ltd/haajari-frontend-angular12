{"ast":null,"code":"import { MILLISECONDS_A_MINUTE, MIN } from '../../constant';\nvar REGEX_VALID_OFFSET_FORMAT = /[+-]\\d\\d(?::?\\d\\d)?/g;\nvar REGEX_OFFSET_HOURS_MINUTES_FORMAT = /([+-]|\\d\\d)/g;\n\nfunction offsetFromString(value) {\n  if (value === void 0) {\n    value = '';\n  }\n\n  var offset = value.match(REGEX_VALID_OFFSET_FORMAT);\n\n  if (!offset) {\n    return null;\n  }\n\n  var _ref = (\"\" + offset[0]).match(REGEX_OFFSET_HOURS_MINUTES_FORMAT) || ['-', 0, 0],\n      indicator = _ref[0],\n      hoursOffset = _ref[1],\n      minutesOffset = _ref[2];\n\n  var totalOffsetInMinutes = +hoursOffset * 60 + +minutesOffset;\n\n  if (totalOffsetInMinutes === 0) {\n    return 0;\n  }\n\n  return indicator === '+' ? totalOffsetInMinutes : -totalOffsetInMinutes;\n}\n\nexport default (function (option, Dayjs, dayjs) {\n  var proto = Dayjs.prototype;\n\n  dayjs.utc = function (date) {\n    var cfg = {\n      date: date,\n      utc: true,\n      args: arguments\n    }; // eslint-disable-line prefer-rest-params\n\n    return new Dayjs(cfg); // eslint-disable-line no-use-before-define\n  };\n\n  proto.utc = function (keepLocalTime) {\n    var ins = dayjs(this.toDate(), {\n      locale: this.$L,\n      utc: true\n    });\n\n    if (keepLocalTime) {\n      return ins.add(this.utcOffset(), MIN);\n    }\n\n    return ins;\n  };\n\n  proto.local = function () {\n    return dayjs(this.toDate(), {\n      locale: this.$L,\n      utc: false\n    });\n  };\n\n  var oldParse = proto.parse;\n\n  proto.parse = function (cfg) {\n    if (cfg.utc) {\n      this.$u = true;\n    }\n\n    if (!this.$utils().u(cfg.$offset)) {\n      this.$offset = cfg.$offset;\n    }\n\n    oldParse.call(this, cfg);\n  };\n\n  var oldInit = proto.init;\n\n  proto.init = function () {\n    if (this.$u) {\n      var $d = this.$d;\n      this.$y = $d.getUTCFullYear();\n      this.$M = $d.getUTCMonth();\n      this.$D = $d.getUTCDate();\n      this.$W = $d.getUTCDay();\n      this.$H = $d.getUTCHours();\n      this.$m = $d.getUTCMinutes();\n      this.$s = $d.getUTCSeconds();\n      this.$ms = $d.getUTCMilliseconds();\n    } else {\n      oldInit.call(this);\n    }\n  };\n\n  var oldUtcOffset = proto.utcOffset;\n\n  proto.utcOffset = function (input, keepLocalTime) {\n    var _this$$utils = this.$utils(),\n        u = _this$$utils.u;\n\n    if (u(input)) {\n      if (this.$u) {\n        return 0;\n      }\n\n      if (!u(this.$offset)) {\n        return this.$offset;\n      }\n\n      return oldUtcOffset.call(this);\n    }\n\n    if (typeof input === 'string') {\n      input = offsetFromString(input);\n\n      if (input === null) {\n        return this;\n      }\n    }\n\n    var offset = Math.abs(input) <= 16 ? input * 60 : input;\n    var ins = this;\n\n    if (keepLocalTime) {\n      ins.$offset = offset;\n      ins.$u = input === 0;\n      return ins;\n    }\n\n    if (input !== 0) {\n      var localTimezoneOffset = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();\n      ins = this.local().add(offset + localTimezoneOffset, MIN);\n      ins.$offset = offset;\n      ins.$x.$localOffset = localTimezoneOffset;\n    } else {\n      ins = this.utc();\n    }\n\n    return ins;\n  };\n\n  var oldFormat = proto.format;\n  var UTC_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n  proto.format = function (formatStr) {\n    var str = formatStr || (this.$u ? UTC_FORMAT_DEFAULT : '');\n    return oldFormat.call(this, str);\n  };\n\n  proto.valueOf = function () {\n    var addedOffset = !this.$utils().u(this.$offset) ? this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset()) : 0;\n    return this.$d.valueOf() - addedOffset * MILLISECONDS_A_MINUTE;\n  };\n\n  proto.isUTC = function () {\n    return !!this.$u;\n  };\n\n  proto.toISOString = function () {\n    return this.toDate().toISOString();\n  };\n\n  proto.toString = function () {\n    return this.toDate().toUTCString();\n  };\n\n  var oldToDate = proto.toDate;\n\n  proto.toDate = function (type) {\n    if (type === 's' && this.$offset) {\n      return dayjs(this.format('YYYY-MM-DD HH:mm:ss:SSS')).toDate();\n    }\n\n    return oldToDate.call(this);\n  };\n\n  var oldDiff = proto.diff;\n\n  proto.diff = function (input, units, _float) {\n    if (input && this.$u === input.$u) {\n      return oldDiff.call(this, input, units, _float);\n    }\n\n    var localThis = this.local();\n    var localInput = dayjs(input).local();\n    return oldDiff.call(localThis, localInput, units, _float);\n  };\n});","map":null,"metadata":{},"sourceType":"module"}