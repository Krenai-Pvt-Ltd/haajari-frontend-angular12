{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.orgIdEmitter = new EventEmitter();\n      this.baseUrl = \"https://backend.hajiri.work/api/v1/attendance\"; // private baseUrl = \"http://localhost:8080/api/v1/attendance\";\n\n      this.openSidebar = true;\n    }\n\n    setOrgId(orgId) {\n      this.orgIdEmitter.emit(orgId);\n    }\n\n    getOrgIdEmitter() {\n      return this.orgIdEmitter;\n    }\n\n    getUsersByFilter(itemPerPage, pageNumber, sort, sortBy, search, searchBy, organizationId, role) {\n      const params = new HttpParams().set(\"itemPerPage\", itemPerPage.toString()).set(\"pageNumber\", pageNumber.toString()).set('sortOrder', sort).set('sortBy', sortBy).set('search', search).set('searchBy', searchBy).set('organizationId', organizationId).set('role', role);\n      return this.httpClient.get(`${this.baseUrl}/users/by-filters`, {\n        params\n      });\n    }\n\n    getAllUsersByFilter(sort, sortBy, search, searchBy, organizationId, role) {\n      const params = new HttpParams().set('sortOrder', sort).set('sortBy', sortBy).set('search', search).set('searchBy', searchBy).set('organizationId', organizationId).set('role', role);\n      return this.httpClient.get(`${this.baseUrl}/all/users`, {\n        params\n      });\n    }\n\n    registerOnboardingDetails(id, name, email, password, state, country, organizationPic) {\n      const params = new HttpParams().set(\"id\", id).set(\"name\", name).set(\"email\", email).set(\"password\", password).set(\"state\", state).set(\"country\", country);\n      const url = `http://localhost:8080/api/v1/attendance/register-org?${params.toString()}`;\n      return this.httpClient.put(url, organizationPic);\n    }\n\n    saveLeave(leaveData) {\n      return this.httpClient.post(`${this.baseUrl}/save-leave`, leaveData);\n    }\n\n    getLeave(orgId) {\n      const params = new HttpParams().set(\"id\", orgId);\n      return this.httpClient.get(`${this.baseUrl}/get-leave`, {\n        params\n      });\n    } // ##################################################3\n\n\n    getTeamsById(id) {\n      const params = new HttpParams().set(\"id\", id);\n      return this.httpClient.get(`${this.baseUrl}/get-team-by-team-id`, {\n        params\n      });\n    }\n\n    getAllTeamsWithUsersByUserId(userId, role) {\n      const params = new HttpParams().set(\"userId\", userId).set(\"role\", role);\n      return this.httpClient.get(`${this.baseUrl}/get-all-teams-with-users-by-user-id`, {\n        params\n      });\n    } // ##################################\n\n\n    getOrg(orgId) {\n      const params = new HttpParams().set(\"id\", orgId);\n      return this.httpClient.get(this.baseUrl + \"/get-org\", {\n        params\n      });\n    }\n\n    getShiftTimings(orgId) {\n      const params = new HttpParams().set(\"id\", orgId);\n      return this.httpClient.get(this.baseUrl + \"/get-shift-timings-detail\", {\n        params\n      });\n    } // getSaveLeave(orgId:any): Observable<any> {\n    //   const params = new HttpParams()\n    //     .set('id', orgId)\n    //   return this.httpClient.get<Savel[]>(this.baseUrl + '/get-leave-detail', {params});\n    // }\n\n\n    updateLeaveStatus(sav) {\n      return this.httpClient.put(`${this.baseUrl}/update-leave-status/${sav.id}`, sav);\n    }\n\n    changeStatusById(id, presenceStatus) {\n      const params = new HttpParams().set(\"id\", id.toString()).set(\"presenceStatus\", presenceStatus.toString());\n      return this.httpClient.put(`${this.baseUrl}/change-status`, params);\n    }\n\n    getDurationDetails(id, role, startDateStr, endDateStr) {\n      const params = new HttpParams().set('id', id).set('role', role).set('startDateStr', startDateStr).set('endDateStr', endDateStr);\n      return this.httpClient.get(`${this.baseUrl}/testingg`, {\n        params\n      });\n    }\n\n    saveShiftTimings(shiftTimingsData) {\n      return this.httpClient.put(`http://localhost:8080/api/v1/attendance/save-shift-timings`, shiftTimingsData);\n    } // #############################################################################\n\n\n    saveDailyQuestions(dailyQuestionsData) {\n      return this.httpClient.post(`http://localhost:8080/api/v1/attendance/save-daily-questions`, dailyQuestionsData);\n    }\n\n    getDailyQuestions(organId) {\n      const params = new HttpParams().set(\"id\", organId);\n      return this.httpClient.get(`${this.baseUrl}/get-daily-questions/id`, {\n        params\n      });\n    }\n\n    deleteDailyQuestions(dailyQuestionsId) {\n      return this.httpClient.delete(`${this.baseUrl}/delete-daily-questions/${dailyQuestionsId}`);\n    } // #############################################################3\n\n\n    saveDailyQuestionsCheckIn(dailyQuestionsData) {\n      return this.httpClient.post(`http://localhost:8080/api/v1/attendance/save-daily-questions-check-in`, dailyQuestionsData);\n    }\n\n    getDailyQuestionsCheckIn(organnId) {\n      const params = new HttpParams().set(\"id\", organnId);\n      return this.httpClient.get(`${this.baseUrl}/get-daily-questions-check-in/id`, {\n        params\n      });\n    }\n\n    deleteDailyQuestionsCheckIn(dailyQuestionsId) {\n      return this.httpClient.delete(`${this.baseUrl}/delete-daily-questions-check-in/${dailyQuestionsId}`);\n    } // #################################333\n\n\n    saveDailyNotes(dailyNotesData) {\n      return this.httpClient.put(`http://localhost:8080/api/v1/attendance/save-daily-Notes`, dailyNotesData);\n    }\n\n    getDailyNotes(organiId) {\n      const params = new HttpParams().set(\"id\", organiId);\n      return this.httpClient.get(`${this.baseUrl}/get-daily-Notes`, {\n        params\n      });\n    } // getUserLeaveRequests(id: any): Observable<any> {\n    //   const params = new HttpParams().set(\"id\", id);\n    //   return this.httpClient.get<DailyNotes[]>(`${this.baseUrl}/user-leave`, {\n    //     params,\n    //   });\n    // }\n    //  ###################################################################################################\n\n\n    saveTokenForOrganization(organization) {\n      return this.httpClient.post(this.baseUrl + '/savetoken', organization);\n    }\n\n    saveUserData(token) {\n      const params = new HttpParams().set('token', token);\n      return this.httpClient.post(this.baseUrl + '/save-slack-data', {\n        params\n      });\n    }\n\n    signInOrganization(email, password) {\n      const params = new HttpParams().set(\"email\", email).set(\"password\", password);\n      return this.httpClient.get(`${this.baseUrl}/organization/signin`, {\n        params\n      });\n    } // saveTokenForOrganization(organization : Organization): Observable<any> {\n    //   return this.httpClient.post<any>(this.baseUrl+ '/savetoken', organization);\n    // }\n    // getAccessToken(code: string): Observable<any> {\n    //   const params = new HttpParams().set(\"code\", code);\n    //   return this.httpClient.get(this.baseUrl + \"/get-token\", { params });\n    // }\n\n\n    registerOrganizationUsingCodeParam(codeParam) {\n      const params = new HttpParams().set(\"codeParam\", codeParam);\n      return this.httpClient.put(`${this.baseUrl}/register-organization-using-code-param`, {}, {\n        params\n      });\n    }\n\n    saveLeaveRequest(request) {\n      return this.httpClient.post(this.baseUrl + '/save-users-leave', request);\n    }\n\n    getUserLeaveRequests(id) {\n      const params = new HttpParams().set(\"id\", id);\n      return this.httpClient.get(`${this.baseUrl}/user-leave`, {\n        params\n      });\n    } //Just for testing\n\n\n    getUserByUserName(name) {\n      const params = new HttpParams().set(\"name\", name);\n      return this.httpClient.get(`${this.baseUrl}/get/user`, {\n        params\n      });\n    }\n\n    registerTeam(userIds, name, description) {\n      const params = new HttpParams().set(\"name\", name).set(\"description\", description);\n      return this.httpClient.post(`${this.baseUrl}/register-team`, userIds, {\n        params\n      });\n    }\n\n    sendInviteToUsers(emails) {\n      return this.httpClient.post(`${this.baseUrl}/send-invite-to-users`, emails);\n    }\n\n    assignManagerRoleToMember(teamId, userId) {\n      const params = new HttpParams().set(\"teamId\", teamId).set(\"userId\", userId);\n      return this.httpClient.put(`${this.baseUrl}/assign-manager-role-to-member`, {}, {\n        params\n      });\n    }\n\n    assignMemberRoleToManager(teamId, userId) {\n      const params = new HttpParams().set(\"teamId\", teamId).set(\"userId\", userId);\n      return this.httpClient.put(`${this.baseUrl}/assign-member-role-to-manager`, {}, {\n        params\n      });\n    }\n\n    removeUserFromTeam(teamId, userId) {\n      const url = `${this.baseUrl}/removeUser?teamId=${teamId}&userId=${userId}`;\n      return this.httpClient.delete(url);\n    }\n\n    addUsersToTeam(teamId, userIds) {\n      const url = `${this.baseUrl}/add-users-by-user-ids`;\n      const params = new HttpParams().set('teamId', +teamId).set('userIds', userIds.join(','));\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }),\n        params: params\n      };\n      return this.httpClient.post(url, null, httpOptions);\n    }\n\n    checkingUserRole(id) {\n      const params = new HttpParams().set(\"id\", id);\n      return this.httpClient.get(`${this.baseUrl}/checking-user-role`, {\n        params\n      });\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}